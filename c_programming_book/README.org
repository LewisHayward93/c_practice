#+TITLE: The C Programming Language 2nd Edition

* Overview

The C Programming Language is a very popular book and sometimes people refer to it as K&R. The authors Brian W. Kernighan and Dennis M. Ritchie did a very good job of explaining the core concepts of programming. The focus of the book is the C programming language, however, the approach is general, so it can be extrapolated to other programming languages.

Each chapter of the book contains exercises that could be very helpful for a better understanding of the C language. The exercises are designed so that anybody can solve them with the knowledge acquired up to that exercise.

This repository contains the following:

- This README file containing some notes on the chapters. Notes will be as concise as possible and only highlighting those those aspects I felt needed some additional notes attached to them in addition to the exercises that tested my knowledge. Code snippets will be added where relevant but will not be complete C programmes on their own, these are purely for visual aid.
- Chapter examples from the chapters that I felt were important enough to have the entire C programme available for compilation. These will contain comments describing the problem etc.
- Exercise Solutions from each of the chapters, all detailed with comments.

* Programming environment

All source code in the chapter examples and exercise solutions are IDE/tect editor agnostic. To run directly from the command line, do the following:

#+begin_src shell
cc hello_world.c # This will compile the program;
./a.out # Run the compiled program
#+end_src

* Chapter 1

** printf

#+begin_src c
printf("%3d\t%6.1f\n", fahr, cels); // prints fahr and cels substituted into print
#+end_src

- printf is a general purpose print function, using '%d' will substitute an integer, whereas '%f' is used for float
- an integer before the substituted type indicates the width, if a float is used, the number after the decimal point denotes the number of decimal places

** Symbolic Constants

#+begin_src c
#include <stdio.h>

#define LOWER 0
#define UPPER 300

int main(void){
...
}
#+end_src

- '#define' line ldefines a symboliuc name or symbolic function
- can be any sequence of characters, not limited to numbers
- conventionally wrote in uppercase

** Character input & output

A *text stream* is a sequence of characters followed be a newline character.

#+begin_src c
int c; // int used as big enough for EOF
c = getchar() // reads the next input character
putchar(c) // prints a character each time it is called
#+end_src

- When counting the number of words, or requiring to separate words, using a 'state'  of whether or not the value of 'c' (getchar()) can help track whether the text stream is within a word.

*** Converting character literals

- for integers 0-9, we can convert the input to a number as seen below:

#+begin_src c
int c;
c = getchar(); // imagine c is int 0-9
printf(c-'0'); // will print the int, allows to manipulate index positions (see exercise 1_14 for example)
#+end_src

- it is also possible to print a letter by passing '%c' as a substitution on th eprintf function

** Functions

*** Function Prototypes

A declaration made before the main function which has a structure that agrees to the function detailed in the file. It is an error if the definition of a function or any uses of it don't agree with its prototype.

- Parameter names need not agree as they needn't be present but the type must agree.

** External Variables

- must be defined only once outside of any function; this sets aside storage for it.

#+begin_src c
#include <stdio.h>

#define MAXLINE 100

int max;
char longest[MAXLINE]
char line[MAXLINE]

int main(void) {
extern int max; // referring to the external variable
}
#+end_src

- 'extern' keyword not required if the definition of variable present before its use in a function

* Chapter 2 - Types, Operators, and Expressions

** Type Ranges

- type ranges can be found in the <limits.h> header file

** Common Standard Library Functions

- strlen() and other string functions are declared in the standard header <string.h>
- converting uppercase to lowercase we can use tolower() from <ctype.h>
- to check if something is a digit we can use isdigit() from <ctype.h>
